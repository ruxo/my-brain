@using Tirax.KMS.Domain
@inherits ReactiveComponentBase<ConceptDetails.VModel>

@if (ViewModel!.OwnerBreadcrumbs.Any()) {
<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-3">
    <MudText Typo="Typo.subtitle2">Owners:</MudText>
    <MudBreadcrumbs Separator="|" Style="padding: 0" Items="ViewModel!.OwnerBreadcrumbs">
        <ItemTemplate Context="item">
            <MudLink Color="Color.Primary" Disabled="item.Disabled" OnClick="() => NotifyConceptSelected(item.Href)">
                @item.Text
            </MudLink>
        </ItemTemplate>
    </MudBreadcrumbs>
</MudStack>
}

<MudStack Row="true" AlignItems="AlignItems.Baseline">
    @if (ViewModel!.IsNameEditing) {
        <MudForm>
            <MudTextField T="string" Label="Rename topic" Required="true" Disabled="ViewModel!.IsSaving"
                          @bind-Value="ViewModel!.EditingName"
                          Adornment="Adornment.End" 
                          AdornmentIcon="@Icons.Material.Filled.Save"
                          OnAdornmentClick="() => ViewModel!.SaveEditName.Execute().ToTask()"/>
        </MudForm>
        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Cancel" Disabled="ViewModel!.IsSaving"
                       OnClick="() => ViewModel!.CancelEditName.Execute().ToTask()"/>
    }
    else {
        <MudText Typo="Typo.h3">@ViewModel!.Name</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => ViewModel!.BeginEditName.Execute().ToTask()"/>
    }
    
    <MudIconButton Icon="@ViewModel!.AddConceptButtonIcon" Color="@ViewModel.AddConceptButtonColor" 
                   Disabled="@ViewModel.IsSaving" OnClick="ShowDialog" />
    <MudFab StartIcon="@Icons.Material.Filled.Bookmark" Disabled="true" Label="Bookmark" />
</MudStack>
<MudDivider />

<LoadingSection Value="ViewModel!.SubConcepts">
    <View Context="conceptList">
        @if (conceptList.Count > 0) {
            <MudText Typo="Typo.h6">Contains</MudText>
            <MudTreeView Items="@conceptList" Hover="true" Dense="true" T="VModel.ConceptListItem"
                         SelectedValueChanged="SelectConcept">
                <ItemTemplate Context="item">
                    @switch (item.Concept) {
                        case Observation<Concept>.Data(Value: var concept):
                            <MudTreeViewItem Text="@concept.Name" Items="@item.SubConcepts" Value="item" Expanded="true" />
                            break;
                        case Observation<Concept>.Failed(Error: var error):
                            <MudTreeViewItem Color="Color.Error" Text="@error.Message" Value="item" />
                            break;
                        default:
                            throw new NotSupportedException();
                    }
                </ItemTemplate>
            </MudTreeView>
        }
    </View>
</LoadingSection>

<ConceptLinkSection Concept="ViewModel.Concept" Disabled="ViewModel.IsSaving" OnConceptUpdated="ConceptUpdated" />

<MudPaper Class="pa-3 ma-2" Height="50em" Width="50em" Elevation="2" Outlined="true">
    <MudText Typo="Typo.h4">Note</MudText>
    <MudText>@ViewModel!.Name</MudText>
</MudPaper>