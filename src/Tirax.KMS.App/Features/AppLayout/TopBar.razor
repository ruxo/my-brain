@using Tirax.KMS.Domain
@using System.Security.Claims
@using Tirax.KMS.Authentication
@inherits ReactiveComponentBase<AppModel.ViewModel>
@inject NavigationManager NavigationManager
@inject IKmsServer Server
@inject AppModel.ViewModel AppModel
@inject AuthenticationStateProvider AuthState

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                   OnClick="ToggleIsOpen" />
    
    <MudStack Spacing="0" Class="mx-3" >
        <MudLink Typo="Typo.h5" Color="Color.Surface" Underline="Underline.None"
                 OnClick="GoHome">Tirax KMS</MudLink>
        <MudText Typo="Typo.caption">@App.Version</MudText>
    </MudStack>
    
    <AuthorizeView Policy="@KmsAuthPolicy.User">
        <MudAutocomplete T="SearchItem" Label="Search" SelectOnClick="true" Variant="Variant.Outlined"
                         Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                         AdornmentColor="Color.Secondary" Margin="Margin.Dense" DebounceInterval="200"
                         SearchFuncWithCancel="Search"
                         ShowProgressIndicator="true" ProgressIndicatorColor="Color.Warning"
                         ToStringFunc="@(i => i.Concept.Name)"

                         ValueChanged="item => ViewModel!.CurrentTopic = item.Concept.Id">
            <ItemTemplate Context="item"><MudText>@item.Text</MudText></ItemTemplate>
        </MudAutocomplete>
        
        <div class="ml-3 name-plate">@user.UserName()</div>
    </AuthorizeView>
</MudAppBar>

@code {

    ClaimsPrincipal user = new (new ClaimsIdentity());

    sealed record SearchItem(string Text, Concept Concept);

    protected override void OnInitialized() {
        ViewModel = AppModel;
    }

    protected override async Task OnInitializedAsync() {
        user = (await AuthState.GetAuthenticationStateAsync()).User;
    }

    async Task<IEnumerable<SearchItem>> Search(string s, CancellationToken ct) =>
        string.IsNullOrWhiteSpace(s) ? Enumerable.Empty<SearchItem>() : await SearchByKeyword(s.Trim());

    async ValueTask<Seq<SearchItem>> SearchByKeyword(string keyword) {
        var result = await Server.Search(keyword, 20);
        var searchResult = await result.MapAsync(async i => new SearchItem(await GetSearchText(i.Concept), i.Concept))
                                       .ToArrayAsync();
        return searchResult.ToSeq();
    }

    async IAsyncEnumerable<string> GetLineageNames(Concept concept) {
        var current = concept;
        while (current is not null) {
            yield return current.Name;
            var owners = await Server.GetOwners(current.Id);
            switch (owners.Length) {
                case > 1:
                    yield return $"[{owners.Map(o => o.Name).Join(", ")}]";
                    break;
                case 1:
                    current = owners[0];
                    break;
                default:
                    current = null;
                    break;
            }
        }
    }

    async ValueTask<string> GetSearchText(Concept concept) {
        var names = await GetLineageNames(concept).Take(3).ToArrayAsync();
        return names.Join(" ⪧ ");
    }

    Task ToggleIsOpen() => ViewModel!.ToggleDrawerOpen.Execute().ToTask();
    void GoHome() => NavigationManager.NavigateTo("/");
}