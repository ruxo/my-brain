@page "/topic/{TopicId}"
@using global::Akka.Actor
@using System.Diagnostics
@using TCRB.CoreApp
@using Tirax.KMS.Domain
@using Tirax.KMS.Akka.ActorMessages
@using Tirax.KMS.App.Extensions
@using Tirax.KMS.App.Features.Search
@attribute [Authorize]

@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAppFacade AppFacade
@inject Session Session

<AuthorizeView>
    <MudStack Class="py-4">
        <MudStack Class="px-4">
            <AppSearchBar />
            <MudText Typo="Typo.h4">@currentConcept?.Name</MudText>
        </MudStack>
        <MudTabs Color="Color.Primary" MinimumTabWidth="120px">
            <MudTabPanel Text="Sub-concepts">
                <MudTreeView Items="@subConcepts" Hover="true" Dense="true" T="ConceptListItem">
                    <ItemTemplate Context="item">
                        <MudTreeViewItem Icon="@Icons.Material.Filled.Lightbulb" Text="@item.Concept.Name" Items="@item.SubConcepts" 
                                         Value="item" Expanded="true"
                                         OnClick="() => OnConceptSelected(item.Concept.Id)"/>
                    </ItemTemplate>
                </MudTreeView>
            </MudTabPanel>
            <MudTabPanel Text="References">
                references
            </MudTabPanel>
            <MudTabPanel Text="Ideas">
                ideas
            </MudTabPanel>
        </MudTabs>
    </MudStack>
    <div style="position: fixed; bottom: 0; left: 0; width: 100%">
        <MudContainer MaxWidth="@App.MaxWidth" Class="d-flex pb-4">
            <MudSpacer />
            <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Label="Concept" OnClick="OnAddConcept"/>
        </MudContainer>
    </div>
    <MudOverlay Visible="isLoading" DarkBackground="true" Absolute="true">
        <MudProgressCircular Indeterminate="true" />
    </MudOverlay>
</AuthorizeView>

@code {

    [Parameter]
    public required string TopicId { get; set; }

    bool isLoading;
    Concept? currentConcept;
    HashSet<ConceptListItem> subConcepts;

    protected override async Task OnParametersSetAsync() {
        var outcome = await AppFacade.PublicLibrary.GetConcept(TopicId);
        if (outcome.IfFaulted(out var error, out var concept)) {
            Snackbar.Add(error.Message, Severity.Error);
            return;
        }
        if (concept.IsNone) return;

        currentConcept = concept.Get();
        var treeOutcome = await BuildTree(currentConcept, 3);
        if (treeOutcome.IfSuccess(out var subConcepts, out error)) {
            Session.Breadcrumbs.Add(new(currentConcept.Name, currentConcept.Id));
            this.subConcepts = subConcepts;
        }
        else
            Snackbar.Add(error.Message, Severity.Error);
    }

    async ValueTask<Outcome<HashSet<ConceptListItem>>> BuildTree(Concept source, int depth) {
        if (depth == 0) return new HashSet<ConceptListItem>();

        var outcome = await AppFacade.PublicLibrary.GetConcepts(source.Contains.ToSeq());
        if (outcome.IfSuccess(out var result, out var error)) {
            Debug.Assert(result.Invalids.IsEmpty);

            var subTreeSequence = result.Concepts.Values.MapAsync(async c => {
                var subTree = await BuildTree(c, depth - 1);
                return subTree.Map(tree => new ConceptListItem(c, tree));
            });

            var subList = new HashSet<ConceptListItem>();
            await foreach(var item in subTreeSequence)
                if (item.IfFaulted(out error, out var i))
                    return error;
                else
                    subList.Add(i);
                    
            return subList;
        }
        else
            return error;
    }

    void OnConceptSelected(ConceptId cid) {
        NavManager.NavigateTo($"/topic/{cid}");
    }

    async Task OnAddConcept() {
        var result = await DialogService.ShowDialog<AddDialog, string>("Add concept");
        if (result.IfSome(out var name)) {
            isLoading = true;
            var addResult = await AppFacade.PublicLibrary.AddConcept(TopicId, name);
            if (addResult.Result.IfRight(out var newConcept, out var error))
                OnConceptSelected(newConcept.Id);
            else
                Snackbar.Add(error.Message, Severity.Error);
            isLoading = false;
        }
    }

    readonly record struct ConceptListItem(Concept Concept, HashSet<ConceptListItem> SubConcepts);
}